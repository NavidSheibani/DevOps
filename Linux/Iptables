
######  iptables  ######

iptables is a powerful firewall utility in Linux used to filter network traffic.
It works by defining rules that match packets and take actions like allowing, dropping, or rejecting them.

------

# Basic Concepts

iptables Chains ::
    INPUT → Controls incoming traffic to the server.
    OUTPUT → Controls outgoing traffic from the server.
    FORWARD → Controls traffic passing through the server (for routing/firewall).
    PREROUTING → Alters packets before routing (used in NAT).
    POSTROUTING → Alters packets after routing (used in NAT).


iptables Tables::
    filter → The default table for packet filtering (INPUT, OUTPUT, FORWARD).
    nat → Used for network address translation (PREROUTING, POSTROUTING).
    mangle → Alters packets (e.g., changing TTL).
    raw → Used for connection tracking exemptions.


------

# iptables Basic Commands

# Check Existing Rules
$ sudo iptables -L -v -n 
    -L → Lists all rules
    -v → Verbose output
    -n → Show numerical IPs instead of resolving hostnames


# Flush (Delete) All Rules
$ sudo iptables -F 


# Reset iptables to Default (Allow All)
$ sudo iptables -P INPUT ACCEPT
$ sudo iptables -P FORWARD ACCEPT
$ sudo iptables -P OUTPUT ACCEPT
$ sudo iptables -F


-------

# Configuring Firewall Rules


# Allow Incoming SSH (Port 22):
$ sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT


# Allow Incoming HTTP/HTTPS Traffic: 
$ sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
$ sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT


# Allow Specific IP Address
$ sudo iptables -A INPUT -s 192.168.1.100 -j ACCEPT


# Block a Specific IP Address
$ sudo iptables -A INPUT -s 192.168.1.200 -j DROP


# Allow Loopback Traffic (Localhost)
$ sudo iptables -A INPUT -i lo -j ACCEPT


# Allow Established and Related Connections
$ sudo iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT


# Drop All Other Incoming Traffic (Default Deny)
$ sudo iptables -P INPUT DROP
$ sudo iptables -P FORWARD DROP



-------

# NAT (Network Address Translation)


# Enable IP Forwarding
$ echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward


# Masquerade Traffic for Internet Sharing
$ sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE


# Port Forwarding (e.g., Forward Port 2222 to Internal Port 22)
$ sudo iptables -t nat -A PREROUTING -p tcp --dport 2222 -j DNAT --to-destination 192.168.1.100:22



-------

# Saving and Restoring iptables Rules


# Save iptables Rules
$ sudo iptables-save > /etc/iptables.rules


# Load iptables Rules on Boot (Ubuntu/Debian)

Create a script:
    $ sudo nano /etc/network/if-pre-up.d/iptables

Add the following content:
    #!/bin/sh
    iptables-restore < /etc/iptables.rules

Make the script executable:
    $ sudo chmod +x /etc/network/if-pre-up.d/iptables


-------

# Advanced iptables Usage

# Block Incoming Ping Requests (ICMP)
$ sudo iptables -A INPUT -p icmp --icmp-type echo-request -j DROP


# Limit Connections per IP
$ sudo iptables -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 10 -j REJECT


# Allow Only Internal Network to Access SSH
$ sudo iptables -A INPUT -p tcp --dport 22 -s 192.168.1.0/24 -j ACCEPT
$ sudo iptables -A INPUT -p tcp --dport 22 -j DROP



-------

# Uncomplicated Firewall (UFW) as an Alternative
If iptables is complex, UFW (Uncomplicated Firewall) can be used:

sudo ufw enable
sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw status verbose

-------

# With this guide, you can configure iptables for security, NAT, port forwarding, and more.
# Author : NavidSheibani






































